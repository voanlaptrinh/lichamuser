<?php

namespace App\Helpers;

class SaoTotXauHelper
{
    public static function getStarDisplayName(string $starName): string
    {
        return  DataHelper::$starDisplayNames[$starName] ?? $starName;
    }
    public static function getNgocHapConclusion(array $ngocHapCatTinh, array $ngocHapHungSat): string
    {
        try {
            if (empty($ngocHapCatTinh) && empty($ngocHapHungSat)) {
                return "üëâ Kh√¥ng c√≥ th√¥ng tin sao t·ªët/x·∫•u ƒë·∫∑c bi·ªát theo Ng·ªçc H·∫°p cho ng√†y n√†y.";
            }

            $catScoreRaw = 0.0;
            $topGoodStars = [];
            if (!empty($ngocHapCatTinh)) {
                $tempGoodStars = [];

                foreach ($ngocHapCatTinh as $name => $description) {

                    if (!empty($name)) {
                        $score = CatHungHelper::getStarRatingForPurpose($name, 'TOT_XAU_CHUNG', true);
                        $catScoreRaw += $score;
                        $tempGoodStars[] = ['name' => $name, 'score' => $score];
                    }
                }

                // S·∫Øp x·∫øp ƒëi·ªÉm t·ª´ cao ƒë·∫øn th·∫•p
                usort($tempGoodStars, fn($a, $b) => $b['score'] <=> $a['score']);

                // L·∫•y top 2 sao t·ªët
                $topGoodStars = array_map(
                    fn($s) => ['name' => $s['name']],
                    array_slice($tempGoodStars, 0, 2)
                );
            }


            $hungScoreRaw = 0.0;
            $topBadStars = [];

            if (!empty($ngocHapHungSat)) {
                $tempBadStars = [];

                foreach ($ngocHapHungSat as $name => $description) {
                    if (!empty($name)) {
                        $score = CatHungHelper::getStarRatingForPurpose($name, 'TOT_XAU_CHUNG', false);
                        $hungScoreRaw += $score;
                        $tempBadStars[] = ['name' => $name, 'score' => $score];
                    }
                }

                // S·∫Øp x·∫øp ƒëi·ªÉm t·ª´ th·∫•p ƒë·∫øn cao (x·∫•u nh·∫•t tr∆∞·ªõc)
                usort($tempBadStars, fn($a, $b) => $a['score'] <=> $b['score']);

                // L·∫•y top 2 sao x·∫•u nh·∫•t
                $topBadStars = array_map(
                    fn($s) => ['name' => $s['name']],
                    array_slice($tempBadStars, 0, 2)
                );
            }


            $totalScore = $catScoreRaw + $hungScoreRaw;

            $conclusion = "üëâ Sao t·ªët li·ªáu c√≥ h√≥a gi·∫£i ƒë∆∞·ª£c sao x·∫•u kh√¥ng? ";
            if ($totalScore < 0) {
                $badNames = implode(', ', array_column($topBadStars, 'name'));
                if (empty($badNames) && !empty($ngocHapHungSat)) {
                    $badNames = implode(', ', array_map(
                        fn($s) => $s['name'] ?? '',
                        array_slice($ngocHapHungSat, 0, 2)
                    ));
                }

                $conclusion .= "Ng√†y n√†y c√≥ m·ªôt s·ªë sao t·ªët, nh∆∞ng l·∫°i c√≥ s·ª± xu·∫•t hi·ªán c·ªßa c√°c hung tinh m·∫°nh m·∫Ω nh∆∞ "
                    . ($badNames ?: "m·ªôt s·ªë sao x·∫•u")
                    . " g√¢y ·∫£nh h∆∞·ªüng ti√™u c·ª±c ƒë·∫øn v·∫≠n kh√≠ c·ªßa ng√†y. M·∫∑c d√π sao t·ªët xu·∫•t hi·ªán kh√¥ng √≠t, nh∆∞ng v·ªÅ t·ªïng th·ªÉ ch√∫ng v·∫´n kh√¥ng ƒë·ªß ƒë·ªÉ h√≥a gi·∫£i ho√†n to√†n c√°c sao x·∫•u. Do ƒë√≥, khi ti·∫øn h√†nh c√°c c√¥ng vi·ªác quan tr·ªçng, b·∫°n c·∫ßn ƒë·∫∑c bi·ªát l∆∞u √Ω v√† t√¨m c√°ch h√≥a gi·∫£i c√°c y·∫øu t·ªë x·∫•u tr∆∞·ªõc khi th·ª±c hi·ªán c√°c quy·∫øt ƒë·ªãnh tr·ªçng ƒë·∫°i.";
            } else {
                $goodNames = implode(', ', array_column($topGoodStars, 'name'));
                if (empty($goodNames) && !empty($ngocHapCatTinh)) {
                    $goodNames = implode(', ', array_map(
                        fn($s) => $s['name'] ?? '',
                        array_slice($ngocHapCatTinh, 0, 2)
                    ));
                }

                $conclusion .= "D√π ng√†y n√†y c√≥ m·ªôt s·ªë sao x·∫•u, nh∆∞ng l·∫°i xu·∫•t hi·ªán nh·ªØng sao t·ªët nh∆∞ "
                    . ($goodNames ?: "c√°c sao t·ªët kh√°c")
                    . " gi√∫p h·ªó tr·ª£ r·∫•t t·ªët cho c√¥ng vi·ªác trong ng√†y. T·ªïng th·ªÉ, c√°c sao t·ªët xu·∫•t hi·ªán ƒë·ªß m·∫°nh m·∫Ω ƒë·ªÉ h√≥a gi·∫£i ·∫£nh h∆∞·ªüng ti√™u c·ª±c t·ª´ sao x·∫•u. Tuy nhi√™n, khi ti·∫øn h√†nh c√°c c√¥ng vi·ªác l·ªõn, b·∫°n v·∫´n c·∫ßn ch√∫ √Ω ƒë·∫øn c√°c y·∫øu t·ªë kh√°c nh∆∞ ng√†y k·ªµ, tu·ªïi xung, hay tr·ª±c x·∫•u. N·∫øu c√≥, h√£y t√¨m c√°ch h√≥a gi·∫£i tr∆∞·ªõc khi th·ª±c hi·ªán c√°c c√¥ng vi·ªác quan tr·ªçng ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c k·∫øt qu·∫£ t·ªët nh·∫•t.";
            }

            return $conclusion;
        } catch (\Throwable $e) {
            \Log::error('L·ªói t·∫°o k·∫øt lu·∫≠n Ng·ªçc H·∫°p', ['error' => $e]);
            return "üëâ Kh√¥ng th·ªÉ t·∫°o k·∫øt lu·∫≠n v·ªÅ Ng·ªçc H·∫°p.";
        }
    }
}
